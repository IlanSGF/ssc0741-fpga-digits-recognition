
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module pcihello(

	//////////// CLOCK //////////
	CLOCK_50, 	// BANK 4
	CLOCK2_50, 	// BANK 7
	CLOCK3_50, 	// BANK 3A

	//////////// LED (High Active) //////////
	LEDG,
	LEDR,

	//////////// KEY (Active Low) //////////
	KEY,

	// switches
   SW,
	
	//////////// SEG7 (Low Active) //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// PCIe //////////
	PCIE_PERST_N,
	PCIE_REFCLK_P,
	PCIE_RX_P,
	PCIE_TX_P,
	PCIE_WAKE_N,

	//////////// Fan Control //////////
	FAN_CTRL 
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED (High Active) //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY (Active Low) //////////
input 		     [3:0]		KEY;
input            [17:0]	   SW;

//////////// SEG7 (Low Active) //////////
output		     [6:0]		HEX0;
output		     [6:0]		HEX1;
output		     [6:0]		HEX2;
output		     [6:0]		HEX3;
output		     [6:0]		HEX4;
output		     [6:0]		HEX5;
output		     [6:0]		HEX6;
output		     [6:0]		HEX7;

//////////// PCIe //////////
input 		          		PCIE_PERST_N;
input 		          		PCIE_REFCLK_P;
input 		     [1:0]		PCIE_RX_P;
output		     [1:0]		PCIE_TX_P;
output		          		PCIE_WAKE_N;

//////////// Fan Control //////////
inout 		          		FAN_CTRL;


//=======================================================
//  REG/WIRE declarations
//=======================================================

parameter SIZE = 5;
parameter KERNEL = 3;

wire [31:0] outbus;
wire [31:0] inbus;

wire clk_boy;
wire conv_clk;
wire [31:0] tmp;
wire [31:0] pxl_out;
wire valid;
wire reset;
reg [31:0] img[27:0][27:0];
reg [31:0] outBuf = 32'b00000000000000000000000000000000;
reg [31:0] inBuf  = 32'b00000000000000000000000000000000;

//TEST
wire [9:0] count;

integer pixelx = -1;
integer pixely = -1;
integer send_receive = 0;

wire [31:0] reg_00; wire [31:0] reg_01; wire [31:0] reg_02;
wire [31:0] reg_10; wire [31:0] reg_11; wire [31:0] reg_12;
wire [31:0] reg_20; wire [31:0] reg_21; wire [31:0] reg_22;


integer i;
integer j;
initial begin
    for (i=0; i<=27; i=i+1)
      for (j=0; j<=27; j=j+1)
          img[i][j] = 32'b00000000000000000000000000000000;
end

//=======================================================
//  Structural coding
//=======================================================

    pcihellocore u0 (
        .pcie_hard_ip_0_rx_in_rx_datain_0       (PCIE_RX_P[0]),       //     pcie_hard_ip_0_rx_in.rx_datain_0
        .pcie_hard_ip_0_tx_out_tx_dataout_0     (PCIE_TX_P[0]),     //    pcie_hard_ip_0_tx_out.tx_dataout_0
        .pcie_hard_ip_0_powerdown_pll_powerdown (PCIE_WAKE_N), // pcie_hard_ip_0_powerdown.pll_powerdown
        .pcie_hard_ip_0_powerdown_gxb_powerdown (PCIE_WAKE_N), //                         .gxb_powerdown
        .pcie_hard_ip_0_refclk_export           (PCIE_REFCLK_P),           //    pcie_hard_ip_0_refclk.export
        .pcie_hard_ip_0_pcie_rstn_export        (PCIE_PERST_N),
        .hexport_external_connection_export     (inbus),     	// hexport_external_connection.export
        .inport_external_connection_export      (outbus)       //  inport_external_connection.export
    );

	 
	 conv c0 (
		.clk (~clk_boy),
		.reset (reset),
		.pxl_in (inBuf[15:0]),
		.reg_00 (reg_00), .reg_01 (reg_01), .reg_02 (reg_02),
		.reg_10 (reg_10), .reg_11 (reg_11), .reg_12 (reg_12),
		.reg_20 (reg_20), .reg_21 (reg_21), .reg_22 (reg_22),
		.pxl_out (pxl_out),
		.count (count),
		.valid (valid)
	);
	 
	//////////// FAN Control //////////
//assign FAN_CTRL = 1'b0; // turn off FAN

assign clk_boy = inbus[31];
assign conv_clk = ~clk_boy;
assign outbus[31:0] = outBuf[31:0];
assign reset = SW[0] | inbus[30];

always@(posedge clk_boy) begin
	// salva valor no buffer de entrada (que eh enviado
	// para o modulo de convolucao)
	inBuf[31:0] = inbus[31:0];

	if (valid == 1) begin
		outBuf[31:0] = pxl_out[31:0];
	end else begin
		outBuf[31:0] = 32'b11111111111111111111111111111111;
	end
end

assign LEDG[7] = valid;
assign LEDG[6:0] = count[6:0];

assign LEDR[17] = reset;
assign LEDR[16] = ~valid;
assign LEDR[15:0] = outBuf[15:0];

assign HEX7 = inBuf[31:24];
assign HEX6 = inBuf[23:16];
assign HEX5 = inBuf[15:8];
assign HEX4 = inBuf[7:0];

assign HEX0 = outBuf[7:0];
assign HEX1 = outBuf[15:8];
assign HEX2 = outBuf[23:16];
assign HEX3 = outBuf[31:24];

endmodule
